// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "collections/areas", "collections/routes", "views/baseview", "views/routes", "views/area", "bootstrap"], function($, _, Backbone, Areas, Routes, BaseView, RoutesView, AreaView) {
    var SidebarView;
    SidebarView = (function(_super) {

      __extends(SidebarView, _super);

      function SidebarView() {
        return SidebarView.__super__.constructor.apply(this, arguments);
      }

      SidebarView.prototype.el = $("#sidebar");

      SidebarView.prototype.events = {};

      SidebarView.prototype.initialize = function() {
        this.areaViews = [];
        this.routeViews = [];
        Areas.bind("all", this.render, this);
        this.dispatcher.bind("change:areas", function(MapAreas) {
          return Areas.reset(MapAreas.models);
        });
        return this.dispatcher.bind("toggle:area", (function(view) {
          return this.toggle(view);
        }), this);
      };

      SidebarView.prototype.render = function() {
        var _this = this;
        this.$el.empty();
        _.each(Areas.models, (function(area) {
          return _this.renderArea(area);
        }), this);
        return this;
      };

      SidebarView.prototype.renderArea = function(area) {
        var view;
        view = new AreaView({
          model: area
        });
        this.$el.append(view.render().el);
        this.areaViews.push(view);
        return this;
      };

      SidebarView.prototype.toggle = function(view) {
        var subview, _ref;
        if (view.$el.hasClass("toggled")) {
          view.$el.removeClass("toggled");
          return (_ref = this.routeViews[view.model.cid]) != null ? _ref.hide() : void 0;
        } else {
          view.$el.addClass("toggled");
          if (!(this.routeViews[view.model.cid] != null)) {
            subview = new RoutesView({
              el: this.el,
              collection: Routes
            });
            subview.collection.fetch({
              data: {
                area: view.model.get("name")
              }
            });
            return this.routeViews[view.model.cid] = subview;
          } else {
            return this.routeViews[view.model.cid].hide();
          }
        }
      };

      SidebarView.prototype.cleanup = function() {
        SidebarView.__super__.cleanup.apply(this, arguments);
        return _(this.areaViews).each(function(view) {
          return view.cleanup();
        });
      };

      return SidebarView;

    })(BaseView);
    return SidebarView;
  });

}).call(this);
