// Generated by CoffeeScript 1.3.3
(function() {

  define(["jquery", "underscore", "backbone", "collections/areas", "views/baseview", "goog!maps,3,other_params:[libraries=places&key=AIzaSyAjNafop09-jd2jkly8d05QaPcOa0WddX8&sensor=true]"], function($, _, Backbone, Areas, BaseView) {
    var MapView;
    MapView = BaseView.extend({
      el: $("#map"),
      events: {},
      initialize: function() {
        var self;
        this.markers = [];
        Areas.bind("all", this.render, this);
        self = this;
        return this.initMap(function(bounds) {
          Areas.fetch({
            data: {
              ll: bounds.getSouthWest().toUrlValue().split(","),
              ur: bounds.getNorthEast().toUrlValue().split(",")
            }
          });
          return self.dispatcher.trigger("change:areas", Areas);
        });
      },
      render: function() {
        this.markers.length = 0;
        return _.each(Areas.models, (function(area) {
          var latLng, marker;
          latLng = new google.maps.LatLng(area.get("loc")[0], area.get("loc")[1]);
          marker = new google.maps.Marker({
            position: latLng,
            draggable: false,
            map: this.map
          });
          return this.markers.push(marker);
        }), this);
      },
      initMap: function(callback) {
        var geocoder, map, options, self;
        options = {
          center: new google.maps.LatLng(-34.397, 150.644),
          minZoom: 4,
          zoom: 7,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        this.map = new google.maps.Map(this.el, options);
        map = this.map;
        geocoder = new google.maps.Geocoder();
        this.geoLocate(map);
        google.maps.event.addListener(map, "bounds_changed", function() {
          return callback(map.getBounds());
        });
        self = this;
        return this.dispatcher.bind("submit:search", function(address) {
          return self.codeAddress(map, geocoder, address);
        });
      },
      initPlaces: function() {
        var ne, request, service, sw;
        sw = new google.maps.LatLng(-90, -180);
        ne = new google.maps.LatLng(90, 180);
        request = {
          bounds: new google.maps.LatLngBounds(sw, ne),
          types: ["country"]
        };
        service = new google.maps.places.PlacesService(this.map);
        return service.search(request, function(places, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            return self.dispatcher.trigger("init:places", places);
          }
        });
      },
      codeAddress: function(map, geocoder, address) {
        return geocoder.geocode({
          address: address
        }, function(results, status) {
          if (status === google.maps.GeocoderStatus.OK) {
            return map.panTo(results[0].geometry.location);
          } else {
            return alert("Geocode was not successful for the following reason: " + status);
          }
        });
      },
      geoLocate: function(map) {
        if (navigator.geolocation) {
          return navigator.geolocation.getCurrentPosition((function(position) {
            var pos;
            pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            return map.setCenter(pos);
          }), function() {
            return this.handleNoGeolocation(map, true);
          });
        } else {
          return this.handleNoGeolocation(map, false);
        }
      },
      handleNoGeolocation: function(map, errorFlag) {
        var content, infowindow, options;
        if (errorFlag) {
          content = "Error: The Geolocation service failed.";
        } else {
          content = "Error: Your browser doesn't support geolocation.";
        }
        options = {
          center: new google.maps.LatLng(60, 105),
          zoom: 6,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        infowindow = new google.maps.InfoWindow(options);
        return map.setCenter(options.center);
      }
    });
    return MapView;
  });

}).call(this);
