// Generated by CoffeeScript 1.3.3
(function() {

  define(["jquery", "underscore", "backbone", "collections/areas", "collections/routes", "views/baseview", "views/area", "views/route", "bootstrap"], function($, _, Backbone, Areas, Routes, BaseView, AreaView, RouteView) {
    var SidebarView;
    SidebarView = BaseView.extend({
      el: $("#sidebar"),
      events: {},
      initialize: function() {
        this.areaViews = [];
        this.routeViews = [];
        Areas.bind("all", this.renderAreas, this);
        Routes.bind("all", this.renderRoutes, this);
        this.dispatcher.bind("change:areas", function(MapAreas) {
          return Areas.reset(MapAreas.models);
        });
        return this.dispatcher.bind("toggle:area", (function(view) {
          return this.toggle(view);
        }), this);
      },
      renderAreas: function() {
        var self;
        this.$el.empty();
        self = this;
        _.each(Areas.models, (function(area) {
          return self.renderArea(area);
        }), this);
        return this;
      },
      renderArea: function(area) {
        var view;
        view = new AreaView({
          model: area
        });
        this.$el.append(view.render().el);
        this.areaViews.push(view);
        return this;
      },
      renderRoutes: function() {
        var self;
        self = this;
        _.each(Routes.models, (function(route) {
          return self.renderRoute(route);
        }), this);
        return this;
      },
      renderRoute: function(route) {
        var view;
        view = new RouteView({
          model: route
        });
        this.$el.append(view.render().el);
        this.routeViews.push(view);
        return this;
      },
      toggle: function(view) {
        if (view.$el.hasClass("toggled")) {
          view.$el.removeClass("toggled");
          Routes.reset();
          return this.clear();
        } else {
          view.$el.addClass("toggled");
          return Routes.fetch({
            data: {
              area: view.model.get("name")
            }
          });
        }
      },
      cleanup: function() {
        cleanup.__super__.constructor.apply(this, arguments);
        _(this.routeViews).each(function(view) {
          return view.close();
        });
        return this.routeViews = [];
      }
    });
    return SidebarView;
  });

}).call(this);
