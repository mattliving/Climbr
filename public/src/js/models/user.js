// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone"], function($, _, Backbone) {
    var User;
    User = (function(_super) {

      __extends(User, _super);

      function User() {
        return User.__super__.constructor.apply(this, arguments);
      }

      User.prototype.defaults = {
        _id: null,
        email: "",
        facebookId: "",
        googleId: "",
        name: "",
        picture: "",
        areas: [],
        routes: [],
        friends: [],
        loc: [null, null]
      };

      User.prototype.initialize = function() {
        this.initFB();
        return this.loadFB(document);
      };

      User.prototype.initFB = function() {
        return window.fbAsyncInit = function() {
          FB.init({
            appId: "507951649218545",
            status: true,
            cookie: true,
            xfbml: true
          });
          return FB.getLoginStatus(function(res) {
            var accessToken, uid;
            console.log(res.status);
            if (res.status === "connected") {
              uid = res.authResponse.userID;
              accessToken = res.authResponse.accessToken;
              return FB.api("/me", function(res) {
                return console.log(res.name);
              });
            } else if (res.status === "not_authorized") {
              return FB.login(function(res) {
                if (res.authResponse) {
                  return FB.api("/me", function(res) {
                    return console.log("Good to see you, " + res.name + ".");
                  });
                } else {
                  return console.log("User cancelled login or did not fully authorize.");
                }
              });
            } else {
              FB.login(function(res) {});
              if (res.authResponse) {
                return FB.api("/me", function(res) {
                  return console.log("Good to see you, " + res.name + ".");
                });
              } else {
                return console.log("User cancelled login or did not fully authorize.");
              }
            }
          });
        };
      };

      User.prototype.loadFB = function(d) {
        var id, js, ref;
        id = "facebook-jssdk";
        ref = d.getElementsByTagName("script")[0];
        if (d.getElementById(id)) {
          return;
        }
        js = d.createElement("script");
        js.id = id;
        js.async = true;
        js.src = "//connect.facebook.net/en_US/all.js";
        return ref.parentNode.insertBefore(js, ref);
      };

      User.prototype.gAuth = function() {};

      User.prototype.clear = function() {
        return this.destroy();
      };

      return User;

    })(Backbone.Model);
    return User;
  });

}).call(this);
