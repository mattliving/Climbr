// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "views/baseview", "views/route"], function($, _, Backbone, BaseView, RouteView, MapView) {
    var RoutesView;
    RoutesView = (function(_super) {

      __extends(RoutesView, _super);

      function RoutesView() {
        return RoutesView.__super__.constructor.apply(this, arguments);
      }

      RoutesView.prototype.events = {};

      RoutesView.prototype.initialize = function() {
        this.hidden = false;
        this.locs = [];
        this.routeViews = [];
        return this.collection.bind("all", this.render, this);
      };

      RoutesView.prototype.render = function() {
        var route, _i, _len, _ref;
        _ref = this.collection.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          route = _ref[_i];
          this.renderRoute(route);
        }
        return this;
      };

      RoutesView.prototype.renderRoute = function(route) {
        var view;
        view = new RouteView({
          model: route
        });
        this.$el.after(view.render().el);
        this.routeViews.push(view);
        return this;
      };

      RoutesView.prototype.renderMarkers = function(route) {
        return this.locs.push({
          x: route.get("loc")[0],
          y: route.get("loc")[1]
        });
      };

      RoutesView.prototype.hide = function() {
        var view, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
        if (!this.hidden) {
          this.hidden = true;
          _ref = this.routeViews;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            view = _ref[_i];
            view.undelegateEvents();
            _results.push(view.$el.hide());
          }
          return _results;
        } else {
          this.hidden = false;
          _ref1 = this.routeViews;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            view = _ref1[_j];
            view.delegateEvents();
            _results1.push(view.$el.show());
          }
          return _results1;
        }
      };

      RoutesView.prototype.cleanup = function() {
        var view, _i, _len, _ref, _results;
        RoutesView.__super__.cleanup.apply(this, arguments);
        _ref = this.routeViews;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          _results.push(view.cleanup());
        }
        return _results;
      };

      return RoutesView;

    })(BaseView);
    return RoutesView;
  });

}).call(this);
