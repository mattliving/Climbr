// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "collections/areas", "collections/routes", "views/baseview", "views/routes", "views/area", "bootstrap"], function($, _, Backbone, Areas, Routes, BaseView, RoutesView, AreaView) {
    var SidebarView;
    SidebarView = (function(_super) {

      __extends(SidebarView, _super);

      function SidebarView() {
        return SidebarView.__super__.constructor.apply(this, arguments);
      }

      SidebarView.prototype.el = $("#sidebar");

      SidebarView.prototype.events = {};

      SidebarView.prototype.initialize = function() {
        this.toggledViews = [];
        this.routeViews = [];
        Areas.bind("all", this.render, this);
        this.dispatcher.bind("change:areas", function(MapAreas) {
          return Areas.reset(MapAreas.models);
        });
        return this.dispatcher.bind("toggle:area", (function(view) {
          return this.toggle(view);
        }), this);
      };

      SidebarView.prototype.render = function() {
        var area, _i, _len, _ref;
        this.$el.empty();
        _ref = Areas.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          area = _ref[_i];
          this.renderArea(area);
        }
        return this;
      };

      SidebarView.prototype.renderArea = function(area) {
        var view;
        view = new AreaView({
          model: area
        });
        this.$el.append(view.render().el);
        return this;
      };

      SidebarView.prototype.toggle = function(view) {
        var area, subview, _ref;
        if (view.$el.hasClass("toggled")) {
          view.$el.removeClass("toggled");
          if ((_ref = this.routeViews[view.model.cid]) != null) {
            _ref.hide();
          }
          this.toggledViews[view.model.cid] = true;
          return this.dispatcher.trigger("zoomOut:area");
        } else {
          view.$el.addClass("toggled");
          if (!(this.routeViews[view.model.cid] != null)) {
            subview = new RoutesView({
              el: view.el,
              collection: new Routes
            });
            area = view.model.get("name");
            subview.collection.fetch({
              data: {
                area: area
              }
            });
            this.routeViews[view.model.cid] = subview;
          } else {
            this.routeViews[view.model.cid].hide();
          }
          return this.dispatcher.trigger("zoomIn:area", area);
        }
      };

      SidebarView.prototype.cleanup = function() {
        var view, _i, _len, _ref, _results;
        SidebarView.__super__.cleanup.apply(this, arguments);
        _ref = this.areaViews;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          _results.push(view.cleanup());
        }
        return _results;
      };

      return SidebarView;

    })(BaseView);
    return SidebarView;
  });

}).call(this);
